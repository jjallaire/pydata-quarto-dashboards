---
title: "Dashboards with Jupyter<br/> and Quarto"
author: "J.J. Allaire --- Founder & CEO, Posit"
title-slide-attributes:
  data-background-color: "#eef3f8"
  data-background-image: "images/bg-logo.png"
  data-background-size: contain
format: 
  revealjs:
    css: styles.css
    code-line-numbers: false
    slide-number: c/t
    width: 1350  
    height: 759.375
    menu: false
    pdf-separate-fragments: true
    theme: [default, theme.scss]
# notebook: open -na Google\ Chrome --args --window-size=912,1060 --new-window
# output: open -na Google\ Chrome --args --window-size=838,995 --new-window --user-data-dir=/Users/jjallaire/Documents/Chrome-Output
---

## Hello!

::: incremental
-   J.J. Allaire: Founder & CEO of Posit, PBC

-   RStudio [⥵]{style="font-size: 1.5em;"} Posit (July 2022)

-   Why? Become a multi-lingual data science tools company

-   How? Open source and commercial software for PyData

-   Early in the journey, but have made lots of investments already

-   Today I'll share some of our work and talk about what's next
:::

## Overview

-   What is Quarto?

-   Introducing Quarto Dashboards

-   Dashboards with Jupyter in Depth

-   Posit and Python: History and Future

# ![](images/icon-intro.svg){.title-icon} Quarto Basics

## What is Quarto? --- <https://quarto.org>

::: columns
::: column
An open-source scientific and technical publishing system that builds on standard markdown with features essential for scientific communication.

-   Pandoc Markdown

-   Jupyter Kernels

-   Dozens of Output Formats

-   Specialized Project Types
:::

::: column
![](images/what-is-quarto.png){height="630px"}
:::
:::

## How does Quarto work? {.nostretch}

![](images/ipynb-how-it-works.png){style="margin-left: 35px;" width="80%"}

-   Computations: [Jupyter](https://jupyter.org)[^1]
-   Markdown: [Pandoc](https://pandoc.org) w/ many enhancements
-   Output: Documents, presentations, websites, books, blogs

[^1]: [Knitr](https://yihui.name/knitr/) and [ObservableJS](https://observablehq.com/@observablehq/observable-javascript) also supported.

## Render Notebook to HTML (default options) {.demo}

{{< demo basics >}}

## Render Notebook to HTML (document level options) {.demo}

{{< demo doc-options >}}

## Render Notebook to HTML (document and cell level options) {.demo}

{{< demo cell-options 2 >}}

## Render Notebook to PDF [--- <https://quarto.org/docs/output-formats/pdf-basics.html>]{.web} {.demo}

{{< demo pdf >}}

## Render Notebook to Revealjs [--- <https://quarto.org/docs/presentations/revealjs/>]{.web} {.demo}

{{< demo presentation >}}

# ![](images/icon-notebooks.svg){.title-icon} Workflow {#workflow}

## Render and Preview

Render to output formats:

``` bash
# ipynb notebook
quarto render notebook.ipynb
quarto render notebook.ipynb --to docx

# plain text qmd
quarto render notebook.qmd 
quarto render notebook.qmd --to pdf
```

Live preview server (re-render on save):

``` bash
# ipynb notebook
quarto preview notebook.ipynb
quarto preview notebook.ipynb --to docx

# plain text qmd
quarto preview notebook.qmd
quarto preview notebook.qmd --to pdf
```

##  {.no-line background-image="images/jupyterlab.png" background-size="contain"}

## Plain Text Notebooks w/`.qmd` Files {.no-line}

::: {layout="[[40,50]]"}
::: smaller
::: {style="padding-top:0.65em;"}
```` {.markdown filename="penguins.qmd" style="overflow-y: hidden" code-line-numbers="|1-7|9-16|18-20|22-31|23-24"}
---
title: "Palmer Penguins"
author: Norah Jones
date: March 12, 2023  
format: html
jupyter: python3
---

```{{python}}
#| echo: false

import pandas as pd
df = pd.read_csv("palmer-penguins.csv") 
df = df[["species", "island", "year", \
         "bill_length_mm", "bill_depth_mm"]]
```

## Exploring the Data

See @fig-bill-sizes for an exploration of bill sizes.

```{{python}}
#| label: fig-bill-sizes
#| fig-cap: Bill Sizes by Species

import matplotlib.pyplot as plt
import seaborn as sns
g = sns.FacetGrid(df, hue="species", height=3)
g.map(plt.scatter, "bill_length_mm", "bill_depth_mm") \
  .add_legend()
```
````
:::
:::

-   Editable with any text editor (extensions for VS Code, Neovim, and Emacs)

-   Cells always run in the same order

-   Integrates well with version control

-   Cache output with Jupyter Cache or Quarto freezer

-   Lots of pros and cons visa-vi traditional `.ipynb` format/editors, use the right tool for each job
:::

## Rendering Pipeline

Notebook workflow (no execution occurs by default):

![](images/ipynb-how-it-works.png){width="63%"}

Plain text workflow (`.qmd` =\> `.ipynb` then execute cells):

![](images/qmd-how-it-works.png){width="80%"}

# ![](images/icon-narratives.svg){.title-icon} Quarto Dashboards

A new output format for easily creating\
dashboards from Jupyter Notebooks

##  {.no-line background-image="images/dashboards/customer-churn.png" background-size="contain"}

##  {.no-line background-image="images/dashboards/mynorfolk.png" background-size="contain"}

##  {.no-line background-image="images/dashboards/labor.png" background-size="contain"}

##  {.no-line background-image="images/dashboards/earthquakes.png" background-size="contain"}

##  {.no-line background-image="images/dashboards/model-card.png" background-size="contain"}

##  {.no-line background-image="images/dashboards/shiny-penguins.png" background-size="contain"}

##  {.no-line background-image="images/dashboards/gapminder.png" background-size="contain"}

## Notebook ➝ Dashboard

::: columns
::: column
![](images/demo-gapminder-notebook-1.png){.demo-notebook}
:::

::: column
 
:::
:::

## Notebook ➝ Dashboard

{{< demo gapminder-notebook >}}

:::

## Notebook ➝ Dashboard

{{< demo gapminder-notebook-data >}}

:::



## Dashboard Components

::: incremental
1)  **Navigation Bar and Pages** --- Icon, title, and author along with links to sub-pages (if more than one page is defined). 

2)  **Sidebars, Rows, Columns, and Tabsets** --- Rows and columns using markdown heading (with optional attributes to control height, width, etc.). Sidebars for interactive inputs. Tabsets to further divide content.

3)  **Cards (Plots, Tables, Value Boxes, Content)** --- Cards are containers for cell outputs and free form markdown text. The content of cards typically maps to *cells* in your notebook or source document.
:::

::: fragment
*All of these components can be authored and customized within notebook UI or plain text qmd.*
:::

## Navigation and Pages




## Plots {.component-slide}

::: columns

::: {.column .fragment .smaller}
[plotly](https://plotly.com/python/)
````python
```{{python}}
#| title: GDP and Life Expectancy
import plotly.express as px
df = px.data.gapminder()
px.scatter(
  df, x="gdpPercap", y="lifeExp", 
  animation_frame="year", animation_group="country",
  size="pop", color="continent", hover_name="country", 
  facet_col="continent", log_x=True, size_max=45, 
  range_x=[100,100000], range_y=[25,90]
)
```
````
:::

::: {.column .fragment}
![](images/plotly-interactive.png)
:::

:::


::: columns

::: {.column .fragment .smaller}
[ipyleaflet](https://ipyleaflet.readthedocs.io)
````python
```{{python}}
#| title: "World Map"
#| padding: 0px
from ipyleaflet import Map, basemaps, basemap_to_tiles
Map(basemap=basemap_to_tiles(basemaps.OpenStreetMap.Mapnik),
    center=(48.204793, 350.121558), zoom=2)
```
````
:::

::: {.column .fragment}
![](images/leaflet-card-title-padding.png)
:::

:::


## Tables {#component-tables .component-slide}

::: columns

::: {.column .fragment}
[tabulate](https://pypi.org/project/tabulate/)

````python
```{{python}}
from tabulate import tabulate
from IPython.display import Markdown
Markdown(tabulate(penguins, showindex=False)}
```
````
:::

::: {.column .fragment}
![](images/tabulate.png)
:::

:::

::: columns

::: {.column .fragment}
[itables](https://pypi.org/project/itables/)

````python
```{{python}}
from itables import show
show(penguins)
```
````
:::

::: {.column .fragment}
![](images/itables-scrolling.png)
:::

:::

```{=html}
<style type="text/css">
.component-slide .column > p {
  margin-top: 0;
}
.component-slide .column > p > img {
  margin-top: -8px;
}
#component-tables .column > div.sourceCode {
  margin-top: 30px;
}
</style>
```

## Value Boxes {#value-box-component .component-slide}

::: columns

::: {.column .fragment width="45%"}
````{.python .pymd code-line-numbers="|4-8|15-17"}
## Row

```{{python}}
#| component: valuebox
#| title: "Current Price"
dict(icon = "currency-dollar",
     color = "secondary",
     value = get_price(data))
```

```{{python}}
#| component: valuebox
#| title: "Change"
change = get_change(data)
dict(value = change['amount'],
     icon = change['icon'],
     color = change['color']) 
```

```{{python}}
#| component: valuebox
#| title: "Percent Change"
dict(icon = "percent",
     color = "light",
     value = change['percent']) 
```
````
:::

::: {.column .fragment width="55%"}
![](images/value-box-app.png){.border width="90%"}
:::


:::

```{=html}
<style type="text/css">
#value-box-component pre.sourceCode code {
  max-height: 750px;
}
</style>
```

## Text Content {.component-slide}

::: columns

::: {.column .fragment}
````{.python .pymd}
## Column

```{{python}}
#| title: Population
px.area(df, x="year", y="pop", 
        color="continent", 
        line_group="country")
```

```{{python}}
#| title: Life Expectancy
px.line(df, x="year", y="lifeExp", 
        color="continent", 
        line_group="country")
```

::: {.card}
Gapminder combines data from multiple sources
into unique coherent time-series that can’t be
found elsewhere. Learn more about the Gampminder
dataset at <https://www.gapminder.org/data/>.
:::
````
:::

::: {.column .fragment}
![](images/text-content-column.png){width="85%"}
:::

:::


## Expanding Cards

Cards provide an **Expand** button which appears at bottom right on hover:

![](images/expanding-cards.png)


##  {.no-line background-image="images/expanding-cards-expanded.png" background-size="contain"}

## Dashboard Deployment

Dashboards are typically just static HTML pages so can be deployed to any web server or web host.

```{=html}
<table id="deployment-table">
<colgroup>
<col style="width: 35%">
<col style="width: 65%">
</colgroup>
<tbody>
<tr class="odd fragment">
<td>Static</td>
<td><span>Rendered a single time (e.g.&nbsp;when underlying data won’t ever change)</span></td>
</tr>
<tr class="even fragment">
<td>Scheduled</td>
<td><span>Rendered on a schedule (e.g.&nbsp;via <code>cron</code> job) to accommodate changing data.</span></td>
</tr>
<tr class="odd fragment">
<td>Parameterized</td>
<td><span>Variations of static or scheduled dashboards based on parameters.</span></td>
</tr>
<tr class="even fragment">
<td>Interactive</td>
<td><span>Fully interactive dashboard using Shiny (requires a server for deployment).</span></td>
</tr>
</tbody>
</table>

<style type="text/css">
#deployment-table td {
  border-bottom: none;
}
#deployment-table td:first-of-type {
  font-weight: 800;
}
</style>
```


## Parameterized Dashboards

::: columns

::: column
![](images/stock-explorer-dashboard.png)
:::

::: column

Add the parameters tag to the first cell
(based on [papermill](https://papermill.readthedocs.io/en/latest/usage-parameterize.html)) :

````python
```{{python}}
#| tags: [parameters]
ticker = "BA"
```
````

Use the `-P` command line option to vary the parameter:

````bash
quarto render dashboard.qmd -P ticker:GOOG
````
:::

:::



## Interactive Dashboards

<https://quarto.org/docs/dashboards/interactivity/shiny-python/>

::: columns


::: {.column width=40%}

- For interactive exploration, some dashboards can benefit from a live Python backend

- To do this with Quarto Dashboards, add interactive [Shiny](https://shiny.posit.co/py/) components 

-  _Note that this requires a server for deployment_

:::

::: {.column width=60%}
![](images/shiny-homepage.png){.border}
:::

::: 

## Hello, Shiny {.smaller}

::: columns

::: column
````{.python .pymd code-line-numbers="|15-19|25-29|29|"}
---
title: "Penguin Bills"
format: dashboard
server: shiny
---

```{{python}}
import seaborn as sns
penguins = sns.load_dataset("penguins")
```

## {.sidebar}

```{{python}}
from shiny import render, ui
ui.input_select("x", "Variable:",
                choices=["bill_length_mm", "bill_depth_mm"])
ui.input_select("dist", "Distribution:", choices=["hist", "kde"])
ui.input_checkbox("rug", "Show rug marks", value = False)
```

## Column

```{{python}}
@render.plot
def displot():
    sns.displot(
        data=penguins, hue="species", multiple="stack",
        x=input.x(), rug=input.rug(),kind=input.dist())
```
````
:::

::: column
![](images/hello-shiny-slide.png)
:::


:::

##  {.no-line background-image="images/dashboards/shiny-penguins.png" background-size="contain"}

## Shiny Deployment

::: {style="margin-bottom: 1em;"}
Shiny for Python applications are built on [Starlette](https://www.starlette.io) and [ASGI](https://asgi.readthedocs.io), and can deployed in server environments that support WebSockets and sticky sessions. 
:::

::: {.columns}

::: column
### Cloud

- [shinyapps.io](https://shiny.posit.co/py/docs/deploy.html#deploy-to-shinyapps.io-cloud-hosting)
- [Hugging Face](https://huggingface.co/docs/hub/spaces-sdks-docker-shiny)
- [Roll your own](https://shiny.posit.co/py/docs/deploy.html#other-hosting-options)
:::

::: column
### On-Prem

- [Shiny Server](https://shiny.posit.co/py/docs/deploy.html#deploy-to-shiny-server-open-source) (open source)
- [Posit Connect](https://shiny.posit.co/py/docs/deploy.html#deploy-to-posit-connect-commercial) (commercial)
- [Roll your own](https://shiny.posit.co/py/docs/deploy.html#other-hosting-options)
:::

:::


## Learning More 

### Quarto v1.4 Pre-Release {style="font-size: 1em;"}

::: {style="margin-top: 0.3em; font-size: 1em;"}
<https://quarto.org/docs/download/prerelease.html>
:::


```{.bash style="font-size: 1.2em"}
pip install git+https://github.com/quarto-dev/quarto-cli
```


### Resources {style="margin-top: 0.6em; font-size: 1em;"}

::: {.border-0 style="font-size: 0.9em; margin-left: -17px;"}
|                         |                                               |
|-------------------------|-----------------------------------------------|
| About Quarto            | <https://quarto.org/>                         |
| Quarto Dashboards       | <https://quarto.org/docs/dashboards/>         |
| Shiny for Python        | <https://shiny.posit.co/py/>                  |
:::

### Slides {style="margin-top: 0.4em; font-size: 1em;"}

<https://jjallaire.github.io/pydata-quarto-dashboards/>  




# ![](images/icon-under-the-hood.svg){.title-icon} Posit and Python

## Posit, PBC

::: columns
::: {.column width="50%"}
Founded 14 years ago to create open source software for data science.

Posit is a [Public Benefit Corporation](https://en.wikipedia.org/wiki/Benefit_corporation) with a mission to create free and open source software for *data science*, *scientific research*, and *technical communication*.

This is built into our charter, and our directors and officers have a fiduciary duty to pursue these public benefits along with balancing the needs of all our stakeholders.
:::

::: {.column width="50%"}
![](images/posit-b-corp.png){style="margin-left: 1em" width="80%"} ![](images/posit-b-impact.png){style="margin-left: 1em" width="80%"}
:::
:::

## Posit Incentives

::: incremental
-   Posit is an independent company and is committed to always being one

-   Corporate control lies *within the company* (not with outside investors)

-   Our imperative is not *growth at all costs* but rather to build something that is organically sustainable and still here fulfilling its mission in 100 years

-   Our core aspiration is to be a durable, trustworthy provider of open source software for science.
:::

## Code First Data Science

::: incremental
-   *Code First Data Science* means doing flexible, iterative, re-usable, inspectable, and reproducible data science with code.

-   This in contrast to many BI Tools which suffer from:

    ::: nonincremental
    -   No single source of truth
    -   Difficulty tracking changes and auditing work
    -   Awkard to extend and reproduce work
    -   Constraints on how you analyze your data and present insights
    :::

-   Our goal is to make doing data science with code as straightforward and seamless as possible.
:::

## PyData Projects

|                                                                           |                                            |
|-------------------------------------------|-----------------------------|
| [quarto](https://quarto.org)                                              | Scientific and technical publishing        |
| [quartodoc](https://machow.github.io/quartodoc/get-started/overview.html) | Python package documentation               |
| [shiny](https://shiny.posit.co/py/)                                       | Interactive PyData web applications        |
| [vetiver](https://vetiver.rstudio.com)                                    | Deploy and monitor ML models               |
| [suiba](https://siuba.org)                                                | Data manipulation for pandas, duckdb, etc. |
| [plotnine](https://plotnine.readthedocs.io/)                              | Grammer of graphics for Python             |

::: {style="margin-top: 10px;"}
-   Principle Corporate Sponsor of [NumFOCUS](https://numfocus.org)

-   Working on standards for scientific notebook publishing in [NotebooksNow](https://data.agu.org/notebooks-now/)
:::

## What Next?

::: incremental
-   Continue working on these and other open source packages (all of our major open source initiatives are now multi-language)

-   Invest in PyData tools ecosystem (already have Quarto and Shiny extensions for Jupyter and VS Code)

-   Work collaboratively with the Python community to realize the potential of code first data science:

    ::: nonincremental
    -   What works well that we should build on?
    -   What are the frustrations and failure modes?
    -   What do people aspire to but can't do easily right now?
    :::
:::

```{=html}
<script type="text/javascript">
// tweak headings in pymd
document.querySelectorAll(".pymd span.co").forEach(el => {
   if (!el.innerText.startsWith("#|")) {
      el.style.fontWeight = 1000;
   }
});
</script>
```